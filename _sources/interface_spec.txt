.. _interface-spec:

=======================
Interface Specification
=======================

Copyright
=========

Copyright Creare LLC 2016.  This software specification is proprietary and should be considered confidential.  Reproduction or distribution prohibited without written permission from Creare.

Overview
========

This document describes the software interface that interacts with the DMS firmware. There are two primary components of this interface:

#. A :ref:`GUI <configuration-gui>` which allows comprehensive interaction with the DMS for purposes of alignment, calibration, and debugging. This GUI will only be accessed by trained technicians, not by the end-user.
#. A simple, low level :ref:`interface<biotek-interface>` which the BioTek host application uses to send simple commands and recieve fault detection data from the DMS during normal operation.

Host
====

For product roll-out, the DMS will be controlled by a PC (Windows 7 or later) over a USB interface. In the future, different devices may interact with the DMS and act as its host, such as the dispenser itself, which runs Windows CE. Consequently, the USB interface and commands should be kept simple and generic.

.. _configuration-gui:

Configuration GUI
=================

A GUI is required to execute the various functions defined in the :ref:`firmware-spec` and display the results. This GUI will be used for testing here at Creare, but will also become deployable code.  Ultimately, this GUI will be activated from within the host’s user interface.  It will be used only by technicians trained to align, calibrate, and debug the device. It will not be available to end-users.

Parameters stored in the GUI are tabulated in :numref:`GUI Parameters`:

.. csv-table:: GUI Parameters
	:header: "Parameter", "Description"
	:widths: 10, 30
	:name: GUI Parameters
	
	"``dms_id``", 		"The ID of the currently connected DMS.
	"
	"``file_string``", 		"A string that is inserted into all saved filenames for identification purposes. Default is an empty string.
	"
	"``save_path``", 			"Path where all files are saved. Default is a ``data`` folder in the DMS GUI software base path.
	"

The GUI should have buttons to:

	#.	**Connect to DMS.** List all DMS systems connected to the host and allow the user to select one to connect to. Assign the result to ``dms_id``. Display the ID of the connected DMS at all times. (See :ref:`identification`.)
	
	#.	**Edit dispense parameters.** Display an editable list of the :numref:`Configuration Parameters`  :ref:`Configuration Parameters` in a pop-up window. Provide confirmation and cancel buttons.
	
	#. **Edit file strings.** Allow user to edit ``file_string`` and ``save_path``. It would be nice if there was a ‘browse’ button for the ``file_path``.
	
	#.	**View static parameters.** Display the :numref:`Static Parameters` :ref:`Static Parameters` in a text format in a pop-up window. Also display the firmware version in this output.
	
	#.	**View background.**  Display ``cal_background`` as a bar plot. For display, the data should be normalized at the ADC full scale and the y-limit fixed at 1. If ``cal_bin_edges`` is defined, indicate these values on the bar plot by overlaying bold vertical lines at the appropriate pixel locations. (See :ref:`calibration`.)
	
	#.	**View calibration parameters.** Display the :numref:`Calibration Parameters` :ref:`Calibration Parameters` (except ``cal_background`` and ``cal_image``) in a text format in a pop-up window. Also display ``cal_image`` as a bar plot. For display, the data should be normalized at the ADC full scale and the y-limit fixed at 1. If ``cal_bin_edges`` is defined, indicate these values on the bar plot by overlaying bold vertical lines at the appropriate pixel locations.
	
	#.	**Initiate alignment mode.** Show a live bar-graph of the raw detector signal using the ``align()`` function. Overlay a line plot of ``cal_background`` on top of this dynamic bar plot. For display, the data should be normalized at the ADC full scale and the y-limit fixed at 1. Provide a button or keystroke to exit this mode. (See :ref:`calibration`.)
	
	#.	**Update dark level.** Prompt the user to cover the sensor. After the user confirms, run ``get_dark_level()``. Report both the original and the resulting ``dark_level`` in an informational pop-up window. (See :ref:`Calibration`.)
	
	#.	**Collect new background.** Prompt the user to confirm that they want to overwrite the current background. Prompt the user to confirm that the laser is aligned, no dispense cartridge is in place, and the optical path is clear.  Then run the ``set_background()`` function. Display the resulting background using the function defined in item 6 above. (See :ref:`Calibration`.)
	
	#.	**Calibrate.** Prompt the user to install the calibration cassette. Then run the ``calibrate()`` function.  Display the resulting calibration using the function defined above. (See :ref:`Calibration`.)
	
	#. **Record data.** Prompt user for a record ``duration`` in seconds (default 10). When user clicks go, run the ``stream_data(duration)`` function. Write this data to an ASCII file as a ``duration X 386`` array (384 integer pixel values at 12 bit  + 2 binary trigger input values).  The file name should be ``[save_path]\[file_string]_DMS_raw_0000.dat``. Increment the integer until either ``save_path`` or ``file_string`` changes.  When complete, show the saved file name with full path in an informational popup. (See :ref:`recording-raw-data`.)
	
	#. **Monitor dispense.** Run ``monitor_dispense()``.  Save the resulting :numref:`Dispense Data` :ref:`Dispense Data` to ``[save_path]\[file_string]_DMS_data_0000.dat`` on the host in some sensible format that we can get into Matlab. Increment the integer index in the filename until either ``save_path`` or ``file_string`` changes. (See :ref:`monitor-dispense`.)
	
	#. **Set reference dispense.** If there is at least one entry in ``history``, run ``set_reference_dispense()`` . Otherwise, show a warning ``'No reference dispense in memory.'`` and exit.  If ``ref-mode`` is not ``'user'``, prompt to set this value, with confirm and cancel buttons. (See :ref:`fault-detection`.)
	
	#. **Set reference mode.** Provide a listbox for the user to select one of the valid values of ``ref_mode`` as defined in :numref:`Configuration Parameters` :ref:`Configuration Parameters`.

.. _biotek-interface:	
	
BioTek Application Interface
=============================

In addition to being able to launch the GUI described above, the BioTek user interface should also be able to talk directly to the DMS to do the following:

	#. Connect to a specific dispenser given a known ``idstr``.
	#.	Set the :ref:`Configuration Parameters`.
	#.	Run ``monitor_dispense()``.
	#.	Run ``set_reference_dispense()``.
	#.	Retrieve fault data. (Implementation details TBD)